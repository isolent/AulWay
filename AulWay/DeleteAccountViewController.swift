//
//  DeleteAccountViewController.swift
//  AulWay
//
//  Created by Aruzhan Kaharmanova on 24.02.2025.
//

import UIKit

class DeleteAccountViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
    }

    @IBAction func deleteAccountTapped(_ sender: UIButton) {
        let confirmAlert = UIAlertController(
            title: "–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
            message: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?",
            preferredStyle: .alert
        )

        confirmAlert.addAction(UIAlertAction(title: "–û—Ç–º–µ–Ω–∞", style: .cancel, handler: nil))
        confirmAlert.addAction(UIAlertAction(title: "–£–¥–∞–ª–∏—Ç—å", style: .destructive, handler: { _ in
            self.performDeleteRequest()
        }))

        present(confirmAlert, animated: true)
    }

    private func performDeleteRequest() {
        guard let userId = UserDefaults.standard.string(forKey: "user_id"),
              let token = UserDefaults.standard.string(forKey: "access_token") else {
            showAlert(title: "–û—à–∏–±–∫–∞", message: "–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")
            return
        }

        let urlString = "http://localhost:8080/api/users/\(userId)"
        guard let url = URL(string: urlString) else {
            showAlert(title: "–û—à–∏–±–∫–∞", message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL.")
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "DELETE"
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")

//        print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ DELETE –Ω–∞ \(urlString)")
//        print("üîê –¢–æ–∫–µ–Ω: \(token.prefix(16))...")

        URLSession.shared.dataTask(with: request) { data, response, error in
            DispatchQueue.main.async {
                if let error = error {
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:", error.localizedDescription)
                    self.showAlert(title: "–û—à–∏–±–∫–∞", message: "–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: \(error.localizedDescription)")
                    return
                }

                guard let httpResponse = response as? HTTPURLResponse else {
                    print("‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                    self.showAlert(title: "–û—à–∏–±–∫–∞", message: "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
                    return
                }

//                print("üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: \(httpResponse.statusCode)")

                if httpResponse.statusCode == 200 || httpResponse.statusCode == 204 {
                    self.handleSuccessfulDeletion()
                } else {
                    self.showAlert(title: "–û—à–∏–±–∫–∞", message: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ö–æ–¥: \(httpResponse.statusCode)")
                }
            }
        }.resume()
    }

    @IBAction func cancelTapped(_ sender: UIButton) {
        self.navigationController?.popViewController(animated: true)
    }

    private func handleSuccessfulDeletion() {
        
        UserDefaults.standard.removeObject(forKey: "user_id")
        UserDefaults.standard.removeObject(forKey: "access_token")
        UserDefaults.standard.removeObject(forKey: "email")
        UserDefaults.standard.synchronize()

        
        if let welcomeVC = storyboard?.instantiateViewController(withIdentifier: "wellcome") {
            welcomeVC.modalPresentationStyle = .fullScreen
            present(welcomeVC, animated: true, completion: nil)
        }
    }

    private func showAlert(title: String, message: String) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "–û–∫", style: .default))
        present(alert, animated: true)
    }
}
